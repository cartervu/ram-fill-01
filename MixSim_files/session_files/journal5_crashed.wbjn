# encoding: utf-8
# 2020 R1
SetScriptVersion(Version="20.1.164")
system1 = GetSystem(Name="FFF 1")
setup1 = system1.GetContainer(ComponentName="Setup")
fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
setup1.Edit()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
setup1.Edit()
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Error*OK")(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Graphics|Mesh"))')
setup1.SendCommand(Command="(cx-gui-do cx-activate-item \"MenuBar*ImportSubMenu*Case & Data...\")(cx-gui-do cx-activate-item \"Question*OK\")(cx-gui-do cx-set-file-dialog-entries \"Select File\" '( \"U:/Ram_Fill_Model_01/MixSim_files/dp0/FFF/Fluent/FFF-5.cas.gz\") \"All Case Files (*.cas*)\")(cx-gui-do cx-activate-item \"Error*OK\")(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Results|Animations|Playback\"))")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Animations|Playback"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Animations|Playback"))')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Playback*Table1(Playback)*ButtonBox8*PushButton6(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Playback*Table1(Playback)*ButtonBox8*PushButton4(stop)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Playback*PanelButtons*PushButton2(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Internal|interior-solid (interior, id=1)"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models|Viscous (SST k-omega)"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models|Species (Species Transport, Reactions)"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models|Species (Species Transport, Reactions)"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models|Species (Species Transport, Reactions)"))(cx-gui-do cx-set-toggle-button2 "Species Model*Table1*Frame6(Options)*ToggleBox1*CheckButton3(Full Multicomponent Diffusion)" #t)(cx-gui-do cx-activate-item "Species Model*Table1*Frame6(Options)*ToggleBox1*CheckButton3(Full Multicomponent Diffusion)")(cx-gui-do cx-set-toggle-button2 "Species Model*Table1*Frame6(Options)*ToggleBox1*CheckButton3(Full Multicomponent Diffusion)" #f)(cx-gui-do cx-activate-item "Species Model*Table1*Frame6(Options)*ToggleBox1*CheckButton3(Full Multicomponent Diffusion)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Species Model*Table2*Table9*PushButton1(Select Boundary Species)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Select Boundary Species*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Species Model*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Adapt)*PushButton1(Refine / Coarsen)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton1(Predefined Criteria)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton1(Predefined Criteria)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton1(Predefined Criteria)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Adaption Controls*Table1*Table3*Table1*CheckButton2(Dynamic Adaption)" #t)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*CheckButton2(Dynamic Adaption)")(cx-gui-do cx-set-integer-entry "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)" 19)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)" 18)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)" 17)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)" 16)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)" 15)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)" 14)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)" 13)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)" 12)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)" 11)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)" 10)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*Table1*IntegerEntry1(Frequency)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Adaption Controls*Table1*Table3*Table3*CheckButton1(Advanced Controls)" #t)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table3*CheckButton1(Advanced Controls)")(cx-gui-do cx-set-toggle-button2 "Adaption Controls*Table1*Table3*Table3*CheckButton1(Advanced Controls)" #f)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table3*CheckButton1(Advanced Controls)")(cx-gui-do cx-activate-item "Adaption Controls*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Cell Registers"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Cell Registers"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Cell Registers"))(cx-gui-do cx-activate-item "Manage Cell Registers*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Dynamic Mesh"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Dynamic Mesh"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Dynamic Mesh"))(cx-gui-do cx-set-toggle-button2 "Dynamic Mesh*Table1*Table1*CheckButton1(Dynamic Mesh)" #t)(cx-gui-do cx-activate-item "Dynamic Mesh*Table1*Table1*CheckButton1(Dynamic Mesh)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh*Table1*Table1*Table2*Table3*Table1(Mesh Methods)*PushButton5(Settings)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Method Settings*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Dynamic Mesh*Table1*Table1*CheckButton1(Dynamic Mesh)" #f)(cx-gui-do cx-activate-item "Dynamic Mesh*Table1*Table1*CheckButton1(Dynamic Mesh)")(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Cell Registers"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Cell Registers"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Cell Registers"))(cx-gui-do cx-activate-item "Manage Cell Registers*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Dynamic Mesh"))')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Adapt)*PushButton1(Refine / Coarsen)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Adaption Controls*Table1*Table3*Table1*CheckButton2(Dynamic Adaption)" #f)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*CheckButton2(Dynamic Adaption)")(cx-gui-do cx-set-toggle-button2 "Adaption Controls*Table1*Table3*Table1*CheckButton2(Dynamic Adaption)" #t)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*CheckButton2(Dynamic Adaption)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton1(Predefined Criteria)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton1(Predefined Criteria)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Adaption Controls*Table1*Table3*Table1*CheckButton2(Dynamic Adaption)" #f)(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table3*Table1*CheckButton2(Dynamic Adaption)")(cx-gui-do cx-activate-item "Adaption Controls*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Mesh Models)*PushButton1(Dynamic Mesh)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Mesh Models)*PushButton1(Dynamic Mesh)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Dynamic Mesh*Table1*Table1*CheckButton1(Dynamic Mesh)" #t)(cx-gui-do cx-activate-item "Dynamic Mesh*Table1*Table1*CheckButton1(Dynamic Mesh)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Interfaces)*PushButton1(Mesh)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Interfaces*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Adapt)*PushButton1(Refine / Coarsen)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-use-window-id 1)(cx-gui-do cx-activate-item "Adaption Controls*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Initialization"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Initialization"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Solution|Initialization\"))(cx-gui-do cx-set-list-selections \"Solution Initialization*Table1*DropDownList1(Compute from)\" '( 2))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Initialization*Table1*DropDownList1(Compute from)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Initialization*Table1*Frame8*PushButton1(Initialize)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Outlet|outlet_dummy (pressure-outlet, id=14)"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Outlet|outlet_dummy (pressure-outlet, id=14)"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Setup|Boundary Conditions|Outlet|outlet_dummy (pressure-outlet, id=14)\"))(cx-gui-do cx-set-expression-entry \"Pressure Outlet*Frame3*Frame1(Momentum)*Table1*Table6*ExpressionEntry1(Gauge Pressure)\" '(\"1034213.55\" . 0))(cx-gui-do cx-activate-item \"Pressure Outlet*PanelButtons*PushButton2(Cancel)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Outlet|outlet_dummy (pressure-outlet, id=14)"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Outlet|outlet_dummy (pressure-outlet, id=14)"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Setup|Boundary Conditions|Outlet|outlet_dummy (pressure-outlet, id=14)\"))(cx-gui-do cx-set-expression-entry \"Pressure Outlet*Frame3*Frame1(Momentum)*Table1*Table6*ExpressionEntry1(Gauge Pressure)\" '(\"103421.355\" . 0))(cx-gui-do cx-activate-item \"Pressure Outlet*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Inlet|inlet (pressure-inlet, id=6)"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Inlet|inlet (pressure-inlet, id=6)"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Inlet|inlet (pressure-inlet, id=6)"))(cx-gui-do cx-activate-item "Pressure Inlet*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Initialization"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Initialization"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Initialization"))')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Initialization*Table1*Frame8*PushButton1(Initialize)")(cx-gui-do cx-activate-item "Question*OK")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Solution Initialization*Table1*DropDownList1(Compute from)\" '( 2))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Initialization*Table1*DropDownList1(Compute from)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Initialization*Table1*Frame8*PushButton1(Initialize)")(cx-gui-do cx-activate-item "Question*OK")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Inlet|inlet (pressure-inlet, id=6)"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Inlet|inlet (pressure-inlet, id=6)"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|Inlet|inlet (pressure-inlet, id=6)"))(cx-gui-do cx-activate-item "Pressure Inlet*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Mesh Models)*PushButton1(Dynamic Mesh)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Dynamic Mesh*Table1*Table1*CheckButton1(Dynamic Mesh)" #f)(cx-gui-do cx-activate-item "Dynamic Mesh*Table1*Table1*CheckButton1(Dynamic Mesh)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Adapt)*PushButton1(Refine / Coarsen)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*NewSubMenu*Field Variable...")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Field Variable Register*Table2*DropDownList5(Derivative Option)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*Table2*DropDownList5(Derivative Option)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton4(Compute)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Field Variable Register*Table2*DropDownList4(Type)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*Table2*DropDownList4(Type)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Field Variable Register*Table2*DropDownList4(Type)\" '( 3))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*Table2*DropDownList4(Type)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-text-entry "Field Variable Register*TextEntry1(Name)" "gradient_refine")(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Turbo Model)*PushButton2(Turbo Topology)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Turbo Topology*PanelButtons*PushButton2(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Adapt)*PushButton1(Refine / Coarsen)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Adapt)*PushButton1(Refine / Coarsen)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*NewSubMenu*Field Variable...")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Field Variable Register*Table2*DropDownList5(Derivative Option)\" '( 2))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*Table2*DropDownList5(Derivative Option)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Domain)*Table1*Table3(Adapt)*PushButton1(Refine / Coarsen)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton1(Predefined Criteria)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton1(Predefined Criteria)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton1(Predefined Criteria)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*NewSubMenu*Field Variable...")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Field Variable Register*Table2*DropDownList4(Type)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*Table2*DropDownList4(Type)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Field Variable Register*Table2*DropDownList5(Derivative Option)\" '( 0))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*Table2*DropDownList5(Derivative Option)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Field Variable Register*Table2*DropDownList5(Derivative Option)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*Table2*DropDownList5(Derivative Option)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton8(Save/Display)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Field Variable Register*Table3*Table4*RealEntry3(Iso-Min)\" '( 10000))(cx-gui-do cx-set-real-entry-list \"Field Variable Register*Table3*Table4*RealEntry4(Iso-Max)\" '( 50000))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton8(Save/Display)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Field Variable Register*Table3*Table4*RealEntry3(Iso-Min)\" '( 0))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton8(Save/Display)")(cx-gui-do cx-activate-item "Question*Cancel")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Field Variable Register*Table3*Table4*RealEntry3(Iso-Min)\" '( 5000))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton8(Save/Display)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Field Variable Register*Table3*Table4*RealEntry3(Iso-Min)\" '( 3000))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton8(Save/Display)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Field Variable Register*Table3*Table4*RealEntry3(Iso-Min)\" '( 1000))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton8(Save/Display)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Field Variable Register*Table3*Table4*RealEntry3(Iso-Min)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton8(Save/Display)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*Table1*Table4*Table1*PushButton2(Cell Registers)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*NewSubMenu*Field Variable...")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Field Variable Register*Table2*DropDownList4(Type)\" '( 3))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*Table2*DropDownList4(Type)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Field Variable Register*Table2*DropDownList5(Derivative Option)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*Table2*DropDownList5(Derivative Option)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Field Variable Register*Table3*Table4*RealEntry6\" '( 0.06))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton8(Save/Display)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton8(Save/Display)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Field Variable Register*Table3*Table4*RealEntry6\" '( 0.01))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton8(Save/Display)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Field Variable Register*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Adaption Controls*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Methods"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Methods"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Solution|Methods\"))(cx-gui-do cx-set-list-selections \"Solution Methods*Table1*Table1*DropDownList1(Formulation)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Methods*Table1*Table1*DropDownList1(Formulation)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Controls"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Controls"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Controls"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Calculation Activities"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Initialization"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Run Calculation"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Run Calculation"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Run Calculation"))(cx-gui-do cx-set-integer-entry "Run Calculation*Table1*Table7(Time Advancement)*Table3(Parameters)*Table1*Table1*IntegerEntry1(Number of Time Steps)" 50)(cx-gui-do cx-activate-item "Run Calculation*Table1*Table7(Time Advancement)*Table3(Parameters)*Table1*Table1*IntegerEntry1(Number of Time Steps)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Run Calculation*Table1*Table9(Solution Advancement)*Table1*PushButton1(Calculate)")(cx-gui-do cx-activate-item "Question*Cancel")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Refresh Input Data")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Run Calculation*Table1*Table1*Table1*PushButton1(Check Case)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Case Check*PanelButtons*PushButton2(Cancel)")')
template1 = GetTemplate(TemplateName="Mesh")
system2 = template1.CreateSystem(
    Position="Left",
    RelativeTo=system1)
template2 = GetTemplate(TemplateName="Mechanical APDL")
system3 = GetSystem(Name="FFF")
meshComponent1 = system3.GetComponent(Name="Mesh")
componentTemplate1 = GetComponentTemplate(Name="ANSYSSetupCellTemplate")
system4 = template2.CreateSystem(
    DataTransferFrom=[Set(FromComponent=meshComponent1, TransferName=None, ToComponentTemplate=componentTemplate1)],
    RelativeTo=system3)
system4.Delete()
geometryComponent1 = system3.GetComponent(Name="Geometry")
system5 = system3.Duplicate(
    ComponentsToShare=[geometryComponent1],
    RelativeTo=system3)
system5.Delete()
template3 = GetTemplate(TemplateName="FLTG")
system6 = template3.CreateSystem(
    Position="Right",
    RelativeTo=system3)
template4 = GetTemplate(TemplateName="Fluid Flow")
solutionComponent1 = system6.GetComponent(Name="Solution")
componentTemplate2 = GetComponentTemplate(Name="FluentResultsCellTemplate")
system7 = template4.CreateSystem(
    DataTransferFrom=[Set(FromComponent=solutionComponent1, TransferName=None, ToComponentTemplate=componentTemplate2)],
    Position="Right",
    RelativeTo=system6)
system7.Delete()
system2.Delete()
template5 = GetTemplate(TemplateName="Results")
componentTemplate3 = GetComponentTemplate(Name="CFDPostTemplate")
system8 = template5.CreateSystem(
    DataTransferFrom=[Set(FromComponent=solutionComponent1, TransferName=None, ToComponentTemplate=componentTemplate3)],
    Position="Right",
    RelativeTo=system6)
setup2 = system6.GetContainer(ComponentName="Setup")
fluentLauncherSettings2 = setup2.GetFluentLauncherSettings()
fluentLauncherSettings2.SetEntityProperties(Properties=Set(EnvPath={}, RunParallel=True, NumberOfProcessorsMeshing=7, NumberOfProcessors=7, NumberOfGPGPUs=1))
tGridData1 = GetDataEntity("/Mesh 2/TGridData:TGridData")
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=7))
mesh1 = system6.GetContainer(ComponentName="Mesh")
Fluent.Edit(Container=mesh1)
setup2.SendCommand(Command="(%py-exec \"workflow.InitializeWorkflow(WorkflowType=r'Watertight Geometry')\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.setState({r'BOIZoneorLabel': r'zone',})\")")
setup2.SendCommand(Command="(cx-use-window-id 1)")
setup2.SendCommand(Command="(cx-gui-do cx-activate-item \"MenuBar*ImportSubMenu*Mesh...\")(cx-gui-do cx-set-file-dialog-entries \"Select File\" '( \"U:/Ram_Fill_Model_01/MixSim_files/dp0/FFF/MECH/FFF.msh\") \"Mesh Files (*.msh* *.MSH* *.cas* *.tgf* )\")")
setup2.SendCommand(Command='(%py-exec "workflow.Workflow.TaskList.setState(None)")')
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Import Geometry': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Add Local Sizing': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Create Surface Mesh': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Describe Geometry': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Apply Share Topology': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Enclose Fluid Regions (Capping)': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Update Boundaries': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Create Regions': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Update Regions': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Add Boundary Layers': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.setState({r'TaskObject:Create Volume Mesh': None,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.LoadState(ListOfRoots=[r'workflow', r'meshing'])\")")
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Solution)*PushButton1(Switch to Solution)")(cx-gui-do cx-activate-item "Question*Cancel")')
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*MeshMenu*Check Quality")')
system9 = template1.CreateSystem(
    Position="Left",
    RelativeTo=system1)
geometry1 = system9.GetContainer(ComponentName="Geometry")
geometry1.SetFile(FilePath="U:/Ram_Fill_Model_01/Tube-Fluid-Volume-split-edge.x_t")
meshComponent2 = system9.GetComponent(Name="Mesh")
meshComponent2.Refresh()
mesh2 = system9.GetContainer(ComponentName="Mesh")
mesh2.Edit()
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
geometryComponent2 = system9.GetComponent(Name="Geometry")
geometryComponent2.Reset()
